# -*- coding: utf-8 -*-
"""Copy of course_selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/160FZXowKFDqWOobh70l-77nKlIYbL9Ir
"""

!pip3 install ortools pandas prettytable

import pandas as pd
import ortools
from ortools.sat.python import cp_model

data = pd.read_csv("courses.csv")
data = data.sample(frac=1).reset_index(drop=True)
courses = data.to_dict("records")

print(type(courses))

"""# Single Objective Approach"""

# Construct model
model = cp_model.CpModel()

# Decision Variable
x = dict()

for i in range(len(courses)):
  x[i] = model.NewBoolVar(f"course_{i}")

print(x)

# Define Constraints
model.Add(sum(courses[i]["credit"] * x[i] for i in range(len(courses) )) == 180) # Total credit 180
model.Add(sum(courses[i]["credit"] * x[i] for i in range(len(courses)) if courses[i]["group"] == "CS") >= 120) # CS must be 120 credits
model.Add(sum(courses[i]["credit"] * x[i] for i in range(len(courses)) if courses[i]["exam_type"] == "EXAM") == 0) # Minimize Exam, assuming exam = 0

total_cost = sum(courses[i]["cost"] * x[i] for i in range(len(courses)))
model.Minimize(total_cost)

solver = cp_model.CpSolver()
status = solver.Solve(model)

def format_table(_data):
  import prettytable
  from prettytable import PrettyTable

  table = PrettyTable()
  table.field_names = list(_data[0].keys())

  for row in _data:
    table.add_row(row.values())

  print(table)

if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
  print('Solution found!')

  _cost = 0
  _courses = list()

  for i in range(len(courses)):
    if solver.Value(x[i]) == 1:
      _courses.append(courses[i])
      _cost = _cost + courses[i]['cost']

  if status == cp_model.OPTIMAL:
    print(f"Optimal solution found, the total cost is {_cost}")
  if status == cp_model.FEASIBLE:
    print(f"Feasible solution found, the total cost is {_cost}")

  format_table(_courses)
else:
  print("No solution found")

"""# Multi Objective Approach"""

# Construct model
model = cp_model.CpModel()

# Decision Variable
x = dict()

for i in range(len(courses)):
  x[i] = model.NewBoolVar(f"course_{i}")

# Define Constraints
model.Add(sum(courses[i]["credit"] * x[i] for i in range(len(courses) )) == 180) # Total credit 180
model.Add(sum(courses[i]["credit"] * x[i] for i in range(len(courses)) if courses[i]["group"] == "CS") >= 120) # CS must be 120 credits

# Weight 0...1000
# SUM(1000)

weight_cost = 0.001
weight_exam = 0.999

total_cost = sum(courses[i]["cost"] * x[i] for i in range(len(courses)))
total_exam = sum(x[i] for i in range(len(courses)) if courses[i]["exam_type"] == "EXAM")
model.Minimize((weight_cost * total_cost) + (weight_exam *total_exam))

solver = cp_model.CpSolver()
status = solver.Solve(model)

if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
  print('Solution found!')

  _cost = 0
  _courses = list()

  for i in range(len(courses)):
    if solver.Value(x[i]) == 1:
      _courses.append(courses[i])
      _cost = _cost + courses[i]['cost']

  if status == cp_model.OPTIMAL:
    print(f"Optimal solution found, the total cost is {_cost}")
  if status == cp_model.FEASIBLE:
    print(f"Feasible solution found, the total cost is {_cost}")

  format_table(_courses)
else:
  print("No solution found")

